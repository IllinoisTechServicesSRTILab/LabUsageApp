{"version":3,"sources":["components/Chart.js","components/LabForm.js","components/AvgChart.js","components/SpinningWheel.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","chartOptions","react_default","a","createElement","classname","es","data","options","React","Component","LabForm","lab","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","action","onSubmit","onChange","AvgChart","currLab","allData","handler","e","avgs","map","item","push","labels","datasets","label","backgroundColor","components_LabForm","elements","line","tension","scales","yAxes","ticks","beginAtZero","override","css","_templateObject","SpinningWheel","loading","className","react_spinners","sizeUnit","size","color","App","ics","ews","isLoaded","stackedICSData","stackedEWSData","labAverages","lineAvgs","_this2","proxyurl","Promise","all","fetch","then","_ref","_ref2","slicedToArray","res1","res2","res3","json","_ref3","_ref4","data1","data2","data3","ics_actives","ics_availables","ics_names","ews_actives","ews_availables","ews_names","_this$state","stackedOptions","test","xAxes","stacked","display","autoSkip","class","href","components_Chart","components_AvgChart","components_SpinningWheel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.0b60df57.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Bar,Line,Pie} from 'react-chartjs-2';\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: props.chartData,\n      chartOptions: props.chartOptions\n    }\n  }\n\n  render() {\n    return (\n      <div classname=\"chart\">\n      <Bar\n        data={this.state.chartData}\n        options={this.state.chartOptions}\n      />\n      </div>\n    )\n  }\n}\n\nexport default Chart;\n","import React, {Component} from 'react';\n\nclass LabForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lab: 'DCL L416',\n    };\n    //When the user changes an option, the form will update\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  //When the user clicks on an option, it sends that back up to the averages chart\n  handleChange(event) {\n    this.setState({lab: event.target.value});\n    this.props.action(event.target.value);\n  }\n\n  handleSubmit(event) {\n    //Nothing for now\n  }\n\n  render() {\n    //Form object with all the major labs as options\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Pick a lab to view daily trends for:\n          <select value={this.state.lab} onChange={this.handleChange}>\n            <option value=\"DCL L416\">DCL L416</option>\n            <option value=\"DCL L440\">DCL L440</option>\n            <option value=\"EH 406B1\">EH 406B1</option>\n            <option value=\"EH 406B8\">EH 406B8</option>\n            <option value=\"GELIB 4C\">GELIB 4C</option>\n            <option value=\"GELIB 4E\">GELIB 4E</option>\n            <option value=\"MEL 1009\">MEL 1009</option>\n            <option value=\"SIEBL 0218\">SIEBL 0218</option>\n            <option value=\"SIEBL 0220\">SIEBL 0220</option>\n            <option value=\"English\">English</option>\n            <option value=\"Nevada\">Nevada</option>\n            <option value=\"Oregon\">Oregon</option>\n            <option value=\"Undergrad\">Undergrad</option>\n            <option value=\"Illini Union\">Illini Union</option>\n            <option value=\"Wohlers\">Wohlers</option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nexport default LabForm;\n","import React, {Component} from 'react';\nimport {Bar,Line,Pie} from 'react-chartjs-2';\nimport LabForm from './LabForm';\n\nclass AvgChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: props.chartData,\n      chartOptions: {},\n      currLab: 'DCL L416',\n      allData: props.allData,\n    }\n    this.handler = this.handler.bind(this);\n  }\n\n  //This function takes in \"e\", a lab that is passed in from the Select Form\n  handler(e) {\n    //Get the averages for the new lab\n    var avgs = [];\n    this.state.allData.map(item => (\n      avgs.push(item[e])\n    ));\n    //Update our chartData to display the lab's info\n    this.setState({\n      currLab: e,\n      chartData: {\n        labels: [\"1:00 AM\", \"2:00 AM\", \"3:00 AM\", \"4:00 AM\", \"5:00 AM\", \"6:00 AM\", \"7:00 AM\", \"8:00 AM\",\n      \"9:00 AM\", \"10:00 AM\", \"11:00 AM\", \"12:00 AM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\",\n      \"6:00 PM\", \"7:00 PM\", \"8:00 PM\", \"9:00 PM\", \"10:00 PM\", \"11:00 PM\", \"12:00 AM\"],\n        datasets: [\n          {\n            label: 'In Use',\n            data: avgs,\n            backgroundColor: 'rgba(200, 150, 200,.6)'\n          }\n        ],\n      }\n    });\n  }\n\n  render() {\n    //Return a line chart with the current lab data\n    return (\n      <div>\n        <div classname=\"chart\">\n        <LabForm action={this.handler}/>\n        <Line\n          data={this.state.chartData}\n          options={{\n            elements: {\n              line: {\n                tension: 0\n              }\n            },\n            scales: {\n              yAxes: [{\n                ticks: {\n                  beginAtZero: true\n                }\n              }]\n            }\n          }}\n        />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default AvgChart;\n","import React from 'react';\nimport { css } from '@emotion/core';\nimport { ClipLoader } from 'react-spinners';\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\n\nclass SpinningWheel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    }\n  }\n  render() {\n    return (\n      <div className='sweet-loading'>\n        <ClipLoader\n          css={override}\n          sizeUnit={\"px\"}\n          size={150}\n          color={'#333'}\n          loading={this.state.loading}\n        />\n      </div>\n    )\n  }\n}\n\nexport default SpinningWheel;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from './components/Chart';\nimport LabForm from './components/LabForm';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\nimport AvgChart from './components/AvgChart';\nimport SpinningWheel from './components/SpinningWheel';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ics: [],\n      ews: [],\n      isLoaded: false,\n      stackedICSData:{},\n      stackedEWSData:{},\n      currLab:\"\",\n      labAverages:{},\n      lineAvgs:{},\n    }\n  }\n\n  componentDidMount() {\n    //Fetch the API data in promise chain\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"https://69smoo2dc6.execute-api.us-east-1.amazonaws.com/api/ics\";\n    const url2 = \"https://69smoo2dc6.execute-api.us-east-1.amazonaws.com/api/ews\";\n    const url3 = \"https://pzgw0wp7ch.execute-api.us-east-1.amazonaws.com/default/getAverageCompLab\";\n    Promise.all([fetch(proxyurl + url), fetch(proxyurl + url2), fetch(proxyurl + url3)])\n      .then(([res1, res2, res3]) => Promise.all([res1.json(), res2.json(), res3.json()]))\n      .then(([data1, data2, data3]) => {\n        //Parse the API data into lists\n        var ics_actives = [];\n        var ics_availables = [];\n        var ics_names = [];\n        data1.map(item => (\n          ics_actives.push(item[\"usage_active\"]),\n          ics_availables.push(item[\"usage_total\"] - item[\"usage_active\"]),\n          ics_names.push(item[\"site_displayname\"])\n        ));\n        var ews_actives = [];\n        var ews_availables = [];\n        var ews_names = [];\n        data2.map(item => (\n          ews_actives.push(item[\"inusecount\"]),\n          ews_availables.push(item[\"machinecount\"] - item[\"inusecount\"]),\n          ews_names.push(item[\"strlabname\"])\n        ));\n        var avgs = [];\n        data3.map(item => (\n          avgs.push(item[\"DCL L416\"])\n        ));\n        //Update all the state variables with the API data\n        this.setState({\n          labAverages: data3,\n          isLoaded: true,\n          ics: data1,\n          ews: data2,\n          stackedICSData: {\n            labels: ics_names,\n            datasets: [\n              {\n                label:'In Use',\n                data: ics_actives,\n                backgroundColor: 'rgba(200, 100, 100, .6)'\n              },\n              {\n                label:'Available',\n                data: ics_availables,\n                backgroundColor: 'rgba(100, 200, 100, .6)'\n              }\n            ],\n          },\n          stackedEWSData: {\n            labels: ews_names,\n            datasets: [\n              {\n                label:'In Use',\n                data: ews_actives,\n                backgroundColor: 'rgba(200, 100, 100, .6)'\n              },\n              {\n                label:'Available',\n                data: ews_availables,\n                backgroundColor: 'rgba(100, 200, 100, .6)'\n              }\n            ],\n          },\n          lineAvgs: {\n            labels: [\"1:00 AM\", \"2:00 AM\", \"3:00 AM\", \"4:00 AM\", \"5:00 AM\", \"6:00 AM\", \"7:00 AM\", \"8:00 AM\",\n          \"9:00 AM\", \"10:00 AM\", \"11:00 AM\", \"12:00 AM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\",\n          \"6:00 PM\", \"7:00 PM\", \"8:00 PM\", \"9:00 PM\", \"10:00 PM\", \"11:00 PM\", \"12:00 AM\"],\n            datasets: [\n              {\n                label: 'In Use',\n                data: avgs,\n                backgroundColor: 'rgba(200, 150, 200,.6)'\n              }\n            ],\n          }\n        })\n      });\n  }\n\n  render() {\n    //Not important\n    var { ics, ews, isLoaded, stackedICSData, stackedEWSData, test, labAverages } = this.state;\n    var stackedOptions = {\n      scales: {\n        xAxes: [{\n          stacked: true ,\n          ticks: {\n            display: true,\n            autoSkip: false\n          }\n        }],\n        yAxes: [{ stacked: true }]\n      },\n    };\n    //If data isn't loaded, show loading screen, otherwise display app\n    if (!isLoaded) {\n      return (\n        <div class=\"loading_box\">\n          Loading data...\n          <SpinningWheel />\n        </div>);\n    } else {\n      return (\n        <div className=\"App\">\n          <div class=\"navbar_new\">\n            <div>Lab Usage Data</div>\n            <div><a href=\"https://it.engineering.illinois.edu/ews\" target=\"_blank\">EWS</a></div>\n            <div><a href=\"https://techservices.illinois.edu/content/computer-lab-locations-and-hours\" target=\"_blank\">ICS</a></div>\n            <div><a href=\"https://srtilab.techservices.illinois.edu/\" target=\"_blank\">SRTI</a></div>\n          </div>\n          <div class=\"chart_title\">EWS (Engineering Workstations)</div>\n          <div class=\"chart_container\">\n            <Chart chartData={this.state.stackedEWSData} chartOptions={stackedOptions} />\n          </div>\n          <div class=\"chart_title\">ICS (Instructional Computing Services)</div>\n          <div class=\"chart_container\">\n            <Chart chartData={this.state.stackedICSData} chartOptions={stackedOptions} />\n          </div>\n          <div class=\"chart_title\">Hourly Lab Trends</div>\n          <div class=\"chart_container\">\n            <AvgChart chartData={this.state.lineAvgs} allData={this.state.labAverages} />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}